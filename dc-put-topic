#!/usr/bin/python3
#
# ptd: put topic to discourse
# created: 26 feb 25
# by: bill wear
# changelog
# |   date   | summary of change                                      |
# +----------+--------------------------------------------------------+
# | 26feb25  | created first version                                  |
# +----------+--------------------------------------------------------+
#
import argparse
import glob
import os
import re
import shutil
import subprocess
import sys
import tempfile
import time
import yaml

from discourse_api import DiscourseAPI


def main():
    # parse args and reject malformed command lines, with usage message
    parser, args = parse_args()
    if not args.topic_number:
        parser.print_usage()
        sys.exit(1)

    # read the config file, erroring out in function if there's a problem
    config = read_config()

    # instantiate an api connection
    api = DiscourseAPI(config)

    # read in stdin
    markdown_content = sys.stdin.read()
    
    # publish content of the staging_file to args.topic_number
    api.update_topic_content(args.topic_number, markdown_content)


def parse_args():
    parser = argparse.ArgumentParser(
        description="ptd - put topic to discourse"
    )
    parser.add_argument(
        "topic_number", type=int, help="topic number to edit"
    )
    parser.add_argument("-d", action="store_true", help="print debug output")
    return parser, parser.parse_args()


def read_config():
    home = os.path.expanduser("~")
    config_path = os.path.join(home, ".config", "disced.conf")

    if not os.path.exists(config_path):
        sys.exit(f"discedit: config file {config_path} not found.")

    with open(config_path, "r") as f:
        try:
            config = yaml.safe_load(f)
            return config
        except yaml.YAMLError as e:
            sys.exit(f"discedit: error parsing YAML config file: {e}")


if __name__ == "__main__":
    main()
