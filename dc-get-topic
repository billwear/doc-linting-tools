#!/usr/bin/python3
#
# gdt: get discourse topic in markdown to stdout or file
# updated: 06 jun 2025
# by: bill wear

import argparse
import os
import re
import sys
import yaml

from discourse_api import DiscourseAPI


def main():
    parser, args = parse_args()
    if not args.topic_number:
        parser.print_usage()
        sys.exit(1)

    config = read_config()
    api = DiscourseAPI(config)

    topic_number = args.topic_number

    # Get full topic metadata
    topic = api.get_topic(topic_number)
    title = topic.get("title", f"untitled-{topic_number}")

    # Normalize title to a safe, dashed filename
    safe_title = re.sub(r'[^\w\s-]', '', title)
    safe_title = re.sub(r'\s+', '-', safe_title.strip())
    safe_title = safe_title.lower()

    filename = f"{safe_title}-{topic_number}.md"

    # Get the markdown content
    discourse_md = api.get_markdown(topic_number)

    with open(filename, "w") as f:
        f.write(discourse_md)

    print(f"âœ… Wrote markdown to: {filename}")


def parse_args():
    parser = argparse.ArgumentParser(
        description="gtd - get topic from discourse"
    )
    parser.add_argument(
        "topic_number", type=int, help="topic number to retrieve"
    )
    parser.add_argument("-d", action="store_true", help="print debug output")
    return parser, parser.parse_args()


def read_config():
    home = os.path.expanduser("~")
    config_path = os.path.join(home, ".config", "disced.conf")

    if not os.path.exists(config_path):
        sys.exit(f"discedit: config file {config_path} not found.")

    with open(config_path, "r") as f:
        try:
            config = yaml.safe_load(f)
            return config
        except yaml.YAMLError as e:
            sys.exit(f"discedit: error parsing YAML config file: {e}")


if __name__ == "__main__":
    main()
