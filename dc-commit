#!/usr/bin/env python3

import os
import sys
import shutil
import subprocess
import time
import argparse

def run(cmd, cwd=None):
    """Run a shell command and raise if it fails"""
    print(f"üîß Running: {' '.join(cmd)}")
    result = subprocess.run(cmd, cwd=cwd, check=True, capture_output=True, text=True)
    return result.stdout.strip()

def create_branch_push(repo_path, filename):
    if not os.path.isdir(repo_path):
        print(f"‚ùå Repo path not found: {repo_path}")
        sys.exit(1)
    if not os.path.isfile(filename):
        print(f"‚ùå File not found: {filename}")
        sys.exit(1)

    # Normalize
    filename_only = os.path.basename(filename)
    epoch = str(int(time.time()))
    branch_name = f"discourse-updates-to-{filename_only.replace('.', '-').lower()}-{epoch}"
    # Copy file in
    dest_path = os.path.join(repo_path, filename_only)
    shutil.copyfile(filename, dest_path)

    # Step into repo
    os.chdir(repo_path)

    # Make sure we're clean
    run(["git", "checkout", "master"])
    run(["git", "pull"])

    # Create new branch
    run(["git", "checkout", "-b", branch_name])

    # Git operations
    run(["git", "add", "."])
    run(["git", "commit", "-m", "updates from automated scan of discourse"])
    run(["git", "push", "-u", "origin", branch_name])

    print(f"‚úÖ Pushed branch: {branch_name}")

def main():
    parser = argparse.ArgumentParser(description="Push Discourse file to new Git branch")
    parser.add_argument("repo_path", help="Path to the local git repo")
    parser.add_argument("filename", help="Path to the file to commit")
    args = parser.parse_args()

    create_branch_push(args.repo_path, args.filename)

if __name__ == "__main__":
    main()
